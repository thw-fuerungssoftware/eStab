<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>Geometric figures</TITLE>
<STYLE>
BODY {font-family:"Times New Roman",serif}
H2 {color:#4000A0}
.st {font-weight:bold; color:#900000}
</STYLE>
</HEAD>
<BODY>
<H2>Geometric figures</H2>
<H4 CLASS="st">Informations</H4>Author: <A HREF="http://dhs.sitio.net" TARGET="_blank">David Hernández Sanz</A><BR>License: Freeware
<H4 CLASS="st">Description</H4>This extension allows to draw lines, rectangles, ellipses, polygons and curves with line style. Public methods are:<BR>
<BR>
&#x2022; <TT>SetLineStyle($style: array)</TT><BR>
<BR>
Sets line style. Parameters are:<BR>
<BR>
  - <TT>style</TT>: an array with the following possible keys:<BR>
<BR>
    . width: width of the line in user units.<BR>
    . cap: type of cap to put on the line (butt, round, square). The difference between "square" and "butt" is that "square" projects a flat end past the end of the line.<BR>
    . join: miter, round, or bevel.<BR>
    . dash: dash pattern. Is 0 (without dash) or array with series of length values, which are the lengths of the on and off dashes.<BR>
    . phase: modifier of the dash pattern which is used to shift the point at which the pattern starts.<BR>
    . color: draw color. Array with components (red, green, blue).<BR>
<BR>
&#x2022; <TT>Line($x1: float, $y1: float, $x2: float, $y2: float, $style: array)</TT><BR>
<BR>
Draws a line. Overrides the method from FPDF. Parameters are:<BR>
<BR>
  - <TT>x1</TT>, <TT>y1</TT>: start point.<BR>
  - <TT>x2</TT>, <TT>y2</TT>: end point.<BR>
  - <TT>style</TT>: line style (array like for SetLineStyle).<BR>
<BR>
&#x2022; <TT>Rect($x: float, $y: float, $w: float, $h: float, $style: string, $border_style: array, $fill_color: array)</TT><BR>
<BR>
Draws a rectangle. Overrides the method from FPDF. Parameters are:<BR>
<BR>
  - <TT>x</TT>, <TT>y</TT>: top left corner.<BR>
  - <TT>w</TT>, <TT>h</TT>: width and height.<BR>
  - <TT>style</TT>: style of rectangle (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>border_style</TT>: border style of rectangle. Array with index: (all => style) for all borders, or (L => style, T => style, R => style, B => style) for each border. Style is an array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
<BR>
&#x2022; <TT>Curve($x0: float, $y0: float, $x1: float, $y1: float, $x2: float, $y2: float, $x3: float, $y3: float, $style: string, $line_style: array, $fill_color: array)</TT><BR>
<BR>
Draws a Bézier curve. Parameters are:<BR>
<BR>
  - <TT>x0</TT>, <TT>y0</TT>: start point.<BR>
  - <TT>x1</TT>, <TT>y1</TT>: control point 1.<BR>
  - <TT>x2</TT>, <TT>y2</TT>: control point 2.<BR>
  - <TT>x3</TT>, <TT>y3</TT>: end point.<BR>
  - <TT>style</TT>: style of rectangle (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>line_style</TT>: line style for curve. Array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
<BR>
&#x2022; <TT>Ellipse($x0: float, $y0: float, $rx: float, $ry: float, $angle: float, $astart: float, $afinish: float, $style: string, $line_style: array, $fill_color: array, $nSeg: integer)</TT><BR>
<BR>
Draws an ellipse. Parameters are:<BR>
<BR>
  - <TT>x0</TT>, <TT>y0</TT>: center point.<BR>
  - <TT>rx</TT>, <TT>ry</TT>: horizontal and vertical radius (if ry is 0, this is a circle).<BR>
  - <TT>angle</TT>: orientation angle (anti-clockwise).<BR>
  - <TT>astart</TT>: start angle.<BR>
  - <TT>afinish</TT>: finish angle.<BR>
  - <TT>style</TT>: style of ellipse (draw and/or fill: D, F, DF, FD, C (D + close)).<BR>
  - <TT>line_style</TT>: line style for ellipse. Array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
  - <TT>nSeg</TT>: ellipse is made up of nSeg Bézier curves.<BR>
<BR>
&#x2022; <TT>Circle($x0: float, $y0: float, $r: float, $astart: float, $afinish: float, $style: string, $line_style: array, $fill_color: array, $nSeg: integer)</TT><BR>
<BR>
Draws a circle. Parameters are:<BR>
<BR>
  - <TT>x0</TT>, <TT>y0</TT>: center point.<BR>
  - <TT>r</TT>: radius.<BR>
  - <TT>astart</TT>: start angle.<BR>
  - <TT>afinish</TT>: finish angle.<BR>
  - <TT>style</TT>: style of circle (draw and/or fill: D, F, DF, FD, C (D + close)).<BR>
  - <TT>line_style</TT>: line style for circle. Array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
  - <TT>nSeg</TT>: circle is made up of nSeg Bézier curves.<BR>
<BR>
&#x2022; <TT>Polygon($p: array, $style: string, $line_style: array, $fill_color: array)</TT><BR>
<BR>
Draws a polygon. Parameters are:<BR>
<BR>
  - <TT>p</TT>: points. Array with values x0, y0, x1, y1,..., x(np-1), y(np-1).<BR>
  - <TT>style</TT>: style of polygon (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>line_style</TT>: line style. Array with index (all => style) for all borders, or (0..np-1 => style) for each border. Style is an array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue)<BR>
<BR>
&#x2022; <TT>RegularPolygon($x0: float, $y0: float, $r: float, $ns: Integer, $angle: float, $circle: boolean, $style: string, $line_style: array, $fill_color: array, $circle_style: array, $circle_line_style: array, $circle_fill_color: array)</TT><BR>
<BR>
Draws a regular polygon. Parameters are:<BR>
<BR>
  - <TT>x0</TT>, <TT>y0</TT>: center point.<BR>
  - <TT>r</TT>: radius of circumscribed circle.<BR>
  - <TT>ns</TT>: number of sides.<BR>
  - <TT>angle</TT>: orientation angle (anti-clockwise).<BR>
  - <TT>circle</TT>: draw circumscribed circle or not.<BR>
  - <TT>style</TT>: style of polygon (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>line_style</TT>: line style. Array with index (all => style) for all borders, or (0..ns-1 => style) for each border. Style is an array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
  - <TT>circle_style</TT>: style of circumscribed circle (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>circle_line_style</TT>: line style for circumscribed circle. Array like for SetLineStyle.<BR>
  - <TT>circle_fill_color</TT>: fill color for circumscribed circle. Array with components (red, green, blue).<BR>
<BR>
&#x2022; <TT>StarPolygon($x0: float, $y0: float, $r: float, $nv: Integer, $ng: Integer, $angle: float, $circle: boolean, $style: string, $line_style: array, $fill_color: array, $circle_style: array, $circle_line_style: array, $circle_fill_color: array)</TT><BR>
<BR>
Draws a star polygon. Parameters are:<BR>
<BR>
  - <TT>x0</TT>, <TT>y0</TT>: center point.<BR>
  - <TT>r</TT>: radius of circumscribed circle.<BR>
  - <TT>nv</TT>: number of vertices.<BR>
  - <TT>ng</TT>: number of gaps (ng % nv = 1 => regular polygon).<BR>
  - <TT>angle</TT>: orientation angle (anti-clockwise).<BR>
  - <TT>circle</TT>: draw circumscribed circle or not.<BR>
  - <TT>style</TT>: style of polygon (draw and/or fill) (D, F, DF, FD).<BR>
  - <TT>line_style</TT>: line style. Array with index (all => style) for all borders, or (0..n-1 => style) for each border. Style is an array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).<BR>
  - <TT>circle_style</TT>: style of circumscribed circle (draw and/or fill) (D, F, DF, FD) (if draw).<BR>
  - <TT>circle_line_style</TT>: line style for circumscribed circle. Array like for SetLineStyle (if draw).<BR>
  - <TT>circle_fill_color</TT>: fill color for circumscribed circle. Array with components (red, green, blue).<BR>
<BR>
&#x2022; <TT>RoundedRect($x: float, $y: float, $w: float, $h: float, $r: float, $round_corner: string, $style: string, $border_style: string, $fill_color: array)</TT><BR>
<BR>
Draws a rounded rectangle. Parameters are:<BR>
<BR>
  - <TT>x</TT>, <TT>y</TT>: top left corner.<BR>
  - <TT>w</TT>, <TT>h</TT>: width and height.<BR>
  - <TT>r</TT>: radius of the rounded corners.<BR>
  - <TT>round_corner</TT>: draws rounded corners or not. String with a 0 (not rounded i-corner) or 1 (rounded i-corner) in i-position. Positions are, in order: top left, top right, bottom right and bottom left.<BR>
  - <TT>style</TT>: style of rectangle (draw and/or fill: D, F, DF, FD).<BR>
  - <TT>border_style</TT>: border style of rectangle. Array like for SetLineStyle.<BR>
  - <TT>fill_color</TT>: fill color. Array with components (red, green, blue).
</BODY>
</HTML>
